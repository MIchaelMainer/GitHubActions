{
  "_args": [
    [
      {
        "raw": "@octokit/auth-token@^2.4.0",
        "scope": "@octokit",
        "escapedName": "@octokit%2fauth-token",
        "name": "@octokit/auth-token",
        "rawSpec": "^2.4.0",
        "spec": ">=2.4.0 <3.0.0",
        "type": "range"
      },
      "C:\\repos\\GitHubActions\\node_modules\\@octokit\\rest"
    ]
  ],
  "_from": "@octokit/auth-token@^2.4.0",
  "_hasShrinkwrap": false,
  "_id": "@octokit/auth-token@2.4.0",
  "_location": "/@octokit/auth-token",
  "_nodeVersion": "12.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/auth-token_2.4.0_1572757708887_0.6135048896210427"
  },
  "_npmUser": {
    "name": "octokitbot",
    "email": "octokitbot@martynus.net"
  },
  "_npmVersion": "6.12.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@octokit/auth-token@^2.4.0",
    "scope": "@octokit",
    "escapedName": "@octokit%2fauth-token",
    "name": "@octokit/auth-token",
    "rawSpec": "^2.4.0",
    "spec": ">=2.4.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@octokit/rest"
  ],
  "_resolved": "https://registry.npmjs.org/@octokit/auth-token/-/auth-token-2.4.0.tgz",
  "_shasum": "b64178975218b99e4dfe948253f0673cbbb59d9f",
  "_shrinkwrap": null,
  "_spec": "@octokit/auth-token@^2.4.0",
  "_where": "C:\\repos\\GitHubActions\\node_modules\\@octokit\\rest",
  "bugs": {
    "url": "https://github.com/octokit/auth-token.js/issues"
  },
  "dependencies": {
    "@octokit/types": "^2.0.0"
  },
  "description": "GitHub API token authentication for browsers and Node.js",
  "devDependencies": {
    "@octokit/request": "^5.3.0",
    "@pika/pack": "^0.5.0",
    "@pika/plugin-build-node": "^0.7.0",
    "@pika/plugin-build-web": "^0.7.0",
    "@pika/plugin-ts-standard-pkg": "^0.7.0",
    "@types/fetch-mock": "^7.3.1",
    "@types/jest": "^24.0.13",
    "fetch-mock": "^7.3.7",
    "jest": "^24.8.0",
    "semantic-release": "^15.13.12",
    "ts-jest": "^24.0.2",
    "typescript": "^3.5.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-eoOVMjILna7FVQf96iWc3+ZtE/ZT6y8ob8ZzcqKY1ibSQCnu4O/B7pJvzMx5cyZ/RjAff6DAdEb0O0Cjcxidkg==",
    "shasum": "b64178975218b99e4dfe948253f0673cbbb59d9f",
    "tarball": "https://registry.npmjs.org/@octokit/auth-token/-/auth-token-2.4.0.tgz",
    "fileCount": 17,
    "unpackedSize": 21182,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdvmDNCRA9TVsSAnZWagAASykP/291sqr8RFb+3SPYpceT\n5mQkg0yZx270F2YRzxEP8cIqYRdvDjDAZ1EhdSSeOr+caiXF/Qi5hhz+OgOD\nduP9c3AjfQhezvsnUqcmwE5ZB3ClkzjbKmkLrXKOC26fFkH13PtP6PWsVV7D\nZB7aAVvT/Hs/J/DHpEbZh9eqk/pT9S5imtYMHwIReJzjxUL2xOXdYKpFc8Y7\ncPWaovyJNJv5NXQj38Xm6z6JpNQxsriXmpVnwKlGCgp2WALoFFcU52zNbt4Z\n9ey7i90eCklKbJPVZRRGcdTIXfMYFgz0ypJUP9fUZCCkAraF3WupteUpbbxH\nSRyNOzHsbSnWvEPED7ldZkxdkJ6/4mO1+WbTXknYwUGPLeAnPS39ddeLW1eo\nEtuAvO09wcuK3xOqsZnMwMJluIR2xIGEX6hQ6JyS3AjqLh7rp7BgMhFKEj88\naViskoxqF97ArvUd6/p6CaL9fAxtvnF57/YBhCjOtPXV1Wpqze4AXB8UKTHW\nCoVizMEbg4D9j1wBuFZzBdriuOFHM/pjuc/Z2iV6Qa8cq9bvm819DzS5ic/B\nd+LYHnOoPcLX1ZhFPauLLzjylZe7Atk7M2Y1NQqR3RjXTBk2IYwYGu0+n+hL\nUU89Mdb+fYQVSY93+HrbnEKP9qRbdzU7kUDDfk01oz8du+sFq52wXxVFpV/V\nIOWF\r\n=MgmD\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist-*/",
    "bin/"
  ],
  "homepage": "https://github.com/octokit/auth-token.js#readme",
  "keywords": [
    "github",
    "octokit",
    "authentication",
    "api"
  ],
  "license": "MIT",
  "main": "dist-node/index.js",
  "maintainers": [
    {
      "name": "bkeepers",
      "email": "brandon@opensoul.org"
    },
    {
      "name": "gr2m",
      "email": "gregor@martynus.net"
    },
    {
      "name": "octokitbot",
      "email": "octokitbot@martynus.net"
    }
  ],
  "module": "dist-web/index.js",
  "name": "@octokit/auth-token",
  "optionalDependencies": {},
  "pika": true,
  "publishConfig": {
    "access": "public"
  },
  "readme": "# auth-token.js\n\n> GitHub API token authentication for browsers and Node.js\n\n[![@latest](https://img.shields.io/npm/v/@octokit/auth-token.svg)](https://www.npmjs.com/package/@octokit/auth-token)\n[![Build Status](https://travis-ci.com/octokit/auth-token.js.svg?branch=master)](https://travis-ci.com/octokit/auth-token.js)\n[![Greenkeeper](https://badges.greenkeeper.io/octokit/auth-token.js.svg)](https://greenkeeper.io/)\n\n`@octokit/auth-token` is the simplest of [GitHub’s authentication strategies](https://github.com/octokit/auth.js).\n\nIt is useful if you want to support multiple authentication strategies, as it’s API is compatible with its sibling packages for [basic](https://github.com/octokit/auth-basic.js), [GitHub App](https://github.com/octokit/auth-app.js) and [OAuth app](https://github.com/octokit/auth.js) authentication.\n\n<!-- toc -->\n\n## Usage\n\n<table>\n<tbody valign=top align=left>\n<tr><th>\nBrowsers\n</th><td width=100%>\n\nLoad `@octokit/auth-token` directly from [cdn.pika.dev](https://cdn.pika.dev)\n\n```html\n<script type=\"module\">\n  import { createTokenAuth } from \"https://cdn.pika.dev/@octokit/auth-token\";\n</script>\n```\n\n</td></tr>\n<tr><th>\nNode\n</th><td>\n\nInstall with <code>npm install @octokit/auth-token</code>\n\n```js\nconst { createTokenAuth } = require(\"@octokit/auth-token\");\n// or: import { createTokenAuth } from \"@octokit/auth-token\";\n```\n\n</td></tr>\n</tbody>\n</table>\n\n```js\nconst auth = createTokenAuth(\"1234567890abcdef1234567890abcdef12345678\");\nconst authentication = await auth();\n// {\n//   type: 'token',\n//   token: '1234567890abcdef1234567890abcdef12345678',\n//   tokenType: 'oauth'\n```\n\n## `createTokenAuth(token) options`\n\nThe `createTokenAuth` method accepts a single argument of type string, which is the token. The passed token can be one of the following:\n\n- [Personal access token](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line)\n- [OAuth access token](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/)\n- Installation access token ([GitHub App Installation](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation))\n- [GITHUB_TOKEN provided to GitHub Actions](https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#environment-variables)\n\nExamples\n\n```js\n// Personal access token or OAuth access token\ncreateTokenAuth(\"1234567890abcdef1234567890abcdef12345678\");\n\n// Installation access token or GitHub Action token\ncreateTokenAuth(\"v1.d3d433526f780fbcc3129004e2731b3904ad0b86\");\n```\n\n## `auth()`\n\nThe `auth()` method has no options. It returns a promise which resolves with the the authentication object.\n\n## Authentication object\n\n<table width=\"100%\">\n  <thead align=left>\n    <tr>\n      <th width=150>\n        name\n      </th>\n      <th width=70>\n        type\n      </th>\n      <th>\n        description\n      </th>\n    </tr>\n  </thead>\n  <tbody align=left valign=top>\n    <tr>\n      <th>\n        <code>type</code>\n      </th>\n      <th>\n        <code>string</code>\n      </th>\n      <td>\n        <code>\"token\"</code>\n      </td>\n    </tr>\n    <tr>\n      <th>\n        <code>token</code>\n      </th>\n      <th>\n        <code>string</code>\n      </th>\n      <td>\n        The provided token.\n      </td>\n    </tr>\n    <tr>\n      <th>\n        <code>tokenType</code>\n      </th>\n      <th>\n        <code>string</code>\n      </th>\n      <td>\n        Can be either <code>\"oauth\"</code> for personal access tokens and OAuth tokens, or <code>\"installation\"</code> for installation access tokens (includes <code>GITHUB_TOKEN</code> provided to GitHub Actions)\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## `auth.hook(request, route, options)` or `auth.hook(request, options)`\n\n`auth.hook()` hooks directly into the request life cycle. It authenticates the request using the provided token.\n\nThe `request` option is an instance of [`@octokit/request`](https://github.com/octokit/request.js#readme). The `route`/`options` parameters are the same as for the [`request()` method](https://github.com/octokit/request.js#request).\n\n`auth.hook()` can be called directly to send an authenticated request\n\n```js\nconst { data: authorizations } = await auth.hook(\n  request,\n  \"GET /authorizations\"\n);\n```\n\nOr it can be passed as option to [`request()`](https://github.com/octokit/request.js#request).\n\n```js\nconst requestWithAuth = request.defaults({\n  request: {\n    hook: auth.hook\n  }\n});\n\nconst { data: authorizations } = await requestWithAuth(\"GET /authorizations\");\n```\n\n## Find more information\n\n`auth()` does not send any requests, it only transforms the provided token string into an authentication object.\n\nHere is a list of things you can do to retrieve further information\n\n### Find out what scopes are enabled for oauth tokens\n\nNote that this does not work for installations. There is no way to retrieve permissions based on an installation access tokens.\n\n```js\nconst TOKEN = \"1234567890abcdef1234567890abcdef12345678\";\n\nconst auth = createTokenAuth(TOKEN);\nconst authentication = await auth();\n\nconst response = await request(\"HEAD /\", {\n  headers: authentication.headers\n});\nconst scopes = response.headers[\"x-oauth-scopes\"].split(/,\\s+/);\n\nif (scopes.length) {\n  console.log(\n    `\"${TOKEN}\" has ${scopes.length} scopes enabled: ${scopes.join(\", \")}`\n  );\n} else {\n  console.log(`\"${TOKEN}\" has no scopes enabled`);\n}\n```\n\n### Find out if token is a personal access token or if it belongs to an OAuth app\n\n```js\nconst TOKEN = \"1234567890abcdef1234567890abcdef12345678\";\n\nconst auth = createTokenAuth(TOKEN);\nconst authentication = await auth();\n\nconst response = await request(\"HEAD /\", {\n  headers: authentication.headers\n});\nconst clientId = response.headers[\"x-oauth-client-id\"];\n\nif (clientId) {\n  console.log(\n    `\"${token}\" is an OAuth token, its app’s client_id is ${clientId}.`\n  );\n} else {\n  console.log(`\"${token}\" is a personal access token`);\n}\n```\n\n### Find out what permissions are enabled for a repository\n\nNote that the `permissions` key is not set when authenticated using an installation access token.\n\n```js\nconst TOKEN = \"1234567890abcdef1234567890abcdef12345678\";\n\nconst auth = createTokenAuth(TOKEN);\nconst authentication = await auth();\n\nconst response = await request(\"GET /repos/:owner/:repo\", {\n  owner: 'octocat',\n  repo: 'hello-world'\n  headers: authentication.headers\n});\n\nconsole.log(response.data.permissions)\n// {\n//   admin: true,\n//   push: true,\n//   pull: true\n// }\n```\n\n### Use token for git operations\n\nBoth OAuth and installation access tokens can be used for git operations. However, when using with an installation, [the token must be prefixed with `x-access-token`](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#http-based-git-access-by-an-installation).\n\nThis example is using the [`execa`](https://github.com/sindresorhus/execa) package to run a `git push` command.\n\n```js\nconst TOKEN = \"1234567890abcdef1234567890abcdef12345678\";\n\nconst auth = createTokenAuth(TOKEN);\nconst { token, tokenType } = await auth();\nconst tokenWithPrefix =\n  tokenType === \"installation\" ? `x-access-token:${token}` : token;\n\nconst repositoryUrl = `https://${tokenWithPrefix}@github.com/octocat/hello-world.git`;\n\nconst { stdout } = await execa(\"git\", [\"push\", repositoryUrl]);\nconsole.log(stdout);\n```\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/octokit/auth-token.js.git"
  },
  "sideEffects": false,
  "source": "dist-src/index.js",
  "types": "dist-types/index.d.ts",
  "version": "2.4.0"
}
