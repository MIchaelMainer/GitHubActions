{
  "_args": [
    [
      {
        "raw": "@octokit/graphql@^4.3.1",
        "scope": "@octokit",
        "escapedName": "@octokit%2fgraphql",
        "name": "@octokit/graphql",
        "rawSpec": "^4.3.1",
        "spec": ">=4.3.1 <5.0.0",
        "type": "range"
      },
      "C:\\repos\\GitHubActions\\node_modules\\@actions\\github"
    ]
  ],
  "_from": "@octokit/graphql@^4.3.1",
  "_hasShrinkwrap": false,
  "_id": "@octokit/graphql@4.3.1",
  "_location": "/@octokit/graphql",
  "_nodeVersion": "12.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql_4.3.1_1572749667724_0.6870203077949613"
  },
  "_npmUser": {
    "name": "octokitbot",
    "email": "octokitbot@martynus.net"
  },
  "_npmVersion": "6.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@octokit/graphql@^4.3.1",
    "scope": "@octokit",
    "escapedName": "@octokit%2fgraphql",
    "name": "@octokit/graphql",
    "rawSpec": "^4.3.1",
    "spec": ">=4.3.1 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@actions/github"
  ],
  "_resolved": "https://registry.npmjs.org/@octokit/graphql/-/graphql-4.3.1.tgz",
  "_shasum": "9ee840e04ed2906c7d6763807632de84cdecf418",
  "_shrinkwrap": null,
  "_spec": "@octokit/graphql@^4.3.1",
  "_where": "C:\\repos\\GitHubActions\\node_modules\\@actions\\github",
  "bugs": {
    "url": "https://github.com/octokit/graphql.js/issues"
  },
  "deno": "dist-web/index.js",
  "dependencies": {
    "@octokit/request": "^5.3.0",
    "@octokit/types": "^2.0.0",
    "universal-user-agent": "^4.0.0"
  },
  "description": "GitHub GraphQL API client for browsers and Node",
  "devDependencies": {
    "@pika/pack": "^0.5.0",
    "@pika/plugin-build-node": "^0.7.0",
    "@pika/plugin-build-web": "^0.7.0",
    "@pika/plugin-ts-standard-pkg": "^0.7.0",
    "@types/fetch-mock": "^7.2.5",
    "@types/jest": "^24.0.13",
    "@types/node": "^12.0.2",
    "fetch-mock": "^7.3.1",
    "jest": "^24.8.0",
    "prettier": "^1.17.1",
    "semantic-release": "^15.13.3",
    "semantic-release-plugin-update-version-in-files": "^1.0.0",
    "ts-jest": "^24.0.2",
    "typescript": "^3.4.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-hCdTjfvrK+ilU2keAdqNBWOk+gm1kai1ZcdjRfB30oA3/T6n53UVJb7w0L5cR3/rhU91xT3HSqCd+qbvH06yxA==",
    "shasum": "9ee840e04ed2906c7d6763807632de84cdecf418",
    "tarball": "https://registry.npmjs.org/@octokit/graphql/-/graphql-4.3.1.tgz",
    "fileCount": 19,
    "unpackedSize": 30877,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdvkFkCRA9TVsSAnZWagAADA0P/130bBnYYYR7v8herPP0\nr12yQUMKFXEgrvNWK6AQ4uu3G/6epiQgM18ZYOiguSBhAfTjUApuvs6kCszE\nei5EzwWL7fw8UELelJ/yhQuLf/zHBlexFJhbnJxSWoA8dwuTHeWiNNY5Da5u\njXSJhGkSUENemhH0It2RzmLr0Hgz2Y592zg56axfPXchTKcGovK9t3u3K5Ee\nc38XmJGvKLYNLph/r6NkFFLfLCyimx/dfZSdmHyIzc7UruNI1cnM41dCe1Gu\nBa3vNPWhD1r9RKwYLbId/GRSaYe6rEvudpoqNBLoTZqcLB553RwOAZZ9llbC\nOQenBtbEQ9CPgoIJAPukxMpO5M/KCJUtsulskpCzYcr0ESbtobF6g2RLMI8f\naY5YjwB3kSXuH2778axzISIDWqFiW+YSkSrV2kxvHDXNSSITupX+7/xZUmCq\nN3WNo36MUCBeylaAY9Lkr7+z1bGN6GxARmycCUnr2GEYI/5AG3ExS/x1kGOs\n+oBORNemHbcDRfOi/r8dpe7JgNO80/NfnOtRPRUUMpIMt8f91wIdDBqPlw6L\nLp+TsTPrlP5rpX7VLEKlhCFKZOuysJjGx81b67Tg6hLSVnrCfA/Sui52k0G2\nznyoH9bH/29b9bxWavUMFJeqcAlfdL4DaFhETI3Ky2aANa5pO3Eq5sCtgJAG\nisHk\r\n=FnY5\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist-*/",
    "bin/"
  ],
  "homepage": "https://github.com/octokit/graphql.js#readme",
  "keywords": [
    "octokit",
    "github",
    "api",
    "graphql"
  ],
  "license": "MIT",
  "main": "dist-node/index.js",
  "maintainers": [
    {
      "name": "bkeepers",
      "email": "brandon@opensoul.org"
    },
    {
      "name": "gr2m",
      "email": "gregor@martynus.net"
    },
    {
      "name": "octokitbot",
      "email": "octokitbot@martynus.net"
    }
  ],
  "name": "@octokit/graphql",
  "optionalDependencies": {},
  "pika": true,
  "publishConfig": {
    "access": "public"
  },
  "readme": "# graphql.js\n\n> GitHub GraphQL API client for browsers and Node\n\n[![@latest](https://img.shields.io/npm/v/@octokit/graphql.svg)](https://www.npmjs.com/package/@octokit/graphql)\n[![Build Status](https://travis-ci.com/octokit/graphql.js.svg?branch=master)](https://travis-ci.com/octokit/graphql.js)\n[![Greenkeeper](https://badges.greenkeeper.io/octokit/graphql.js.svg)](https://greenkeeper.io/)\n\n<!-- toc -->\n\n- [Usage](#usage)\n  - [Send a simple query](#send-a-simple-query)\n  - [Authentication](#authentication)\n  - [Variables](#variables)\n  - [Pass query together with headers and variables](#pass-query-together-with-headers-and-variables)\n  - [Use your own `@octokit/request` instance](#)\n- [Errors](#errors)\n- [Partial responses](#partial-responses)\n- [Writing tests](#writing-tests)\n- [License](#license)\n\n<!-- tocstop -->\n\n## Usage\n\n<table>\n<tbody valign=top align=left>\n<tr><th>\nBrowsers\n</th><td width=100%>\n\nLoad `@octokit/graphql` directly from [cdn.pika.dev](https://cdn.pika.dev)\n\n```html\n<script type=\"module\">\n  import { endpoint } from \"https://cdn.pika.dev/@octokit/graphql\";\n</script>\n```\n\n</td></tr>\n<tr><th>\nNode\n</th><td>\n\nInstall with <code>npm install @octokit/graphql</code>\n\n```js\nconst { graphql } = require(\"@octokit/graphql\");\n// or: import { graphql } from \"@octokit/graphql\";\n```\n\n</td></tr>\n</tbody>\n</table>\n\n### Send a simple query\n\n```js\nconst { repository } = await graphql(\n  `\n    {\n      repository(owner: \"octokit\", name: \"graphql.js\") {\n        issues(last: 3) {\n          edges {\n            node {\n              title\n            }\n          }\n        }\n      }\n    }\n  `,\n  {\n    headers: {\n      authorization: `token secret123`\n    }\n  }\n);\n```\n\n### Authentication\n\nThe simplest way to authenticate a request is to set the `Authorization` header, e.g. to a [personal access token](https://github.com/settings/tokens/).\n\n```js\nconst graphqlWithAuth = graphql.defaults({\n  headers: {\n    authorization: `token secret123`\n  }\n});\nconst { repository } = await graphqlWithAuth(`\n  {\n    repository(owner: \"octokit\", name: \"graphql.js\") {\n      issues(last: 3) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }\n`);\n```\n\nFor more complex authentication strategies such as GitHub Apps or Basic, we recommend the according authentication library exported by [`@octokit/auth`](https://github.com/octokit/auth.js).\n\n```js\nconst { createAppAuth } = require(\"@octokit/auth-app\");\nconst auth = createAppAuth({\n  id: process.env.APP_ID,\n  privateKey: process.env.PRIVATE_KEY,\n  installationId: 123\n});\nconst graphqlWithAuth = graphql.defaults({\n  request: {\n    hook: auth.hook\n  }\n});\n\nconst { repository } = await graphqlWithAuth(\n  `{\n    repository(owner: \"octokit\", name: \"graphql.js\") {\n      issues(last: 3) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }`\n);\n```\n\n### Variables\n\n⚠️ Do not use [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) in the query strings as they make your code vulnerable to query injection attacks (see [#2](https://github.com/octokit/graphql.js/issues/2)). Use variables instead:\n\n```js\nconst { lastIssues } = await graphql(`query lastIssues($owner: String!, $repo: String!, $num: Int = 3) {\n    repository(owner:$owner, name:$repo) {\n      issues(last:$num) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }`, {\n    owner: 'octokit',\n    repo: 'graphql.js'\n    headers: {\n      authorization: `token secret123`\n    }\n  }\n})\n```\n\n### Pass query together with headers and variables\n\n```js\nconst { graphql } = require('@octokit/graphql')\nconst { lastIssues } = await graphql({\n  query: `query lastIssues($owner: String!, $repo: String!, $num: Int = 3) {\n    repository(owner:$owner, name:$repo) {\n      issues(last:$num) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }`,\n  owner: 'octokit',\n  repo: 'graphql.js'\n  headers: {\n    authorization: `token secret123`\n  }\n})\n```\n\n### Use with GitHub Enterprise\n\n```js\nlet { graphql } = require(\"@octokit/graphql\");\ngraphql = graphql.defaults({\n  baseUrl: \"https://github-enterprise.acme-inc.com/api\",\n  headers: {\n    authorization: `token secret123`\n  }\n});\nconst { repository } = await graphql(`\n  {\n    repository(owner: \"acme-project\", name: \"acme-repo\") {\n      issues(last: 3) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }\n`);\n```\n\n### Use custom `@octokit/request` instance\n\n```js\nconst { request } = require(\"@octokit/request\");\nconst { withCustomRequest } = require(\"@octokit/graphql\");\n\nlet requestCounter = 0\nconst myRequest = request.defaults({\n  headers: {\n    authentication: 'token secret123'\n  },\n  request: {\n    hook(request, options) {\n      requestCounter++\n      return request(options)\n    }\n  }\n})\nconst myGraphql = withCustomRequest(myRequest) \nawait request('/')\nawait myGraphql(`\n  {\n    repository(owner: \"acme-project\", name: \"acme-repo\") {\n      issues(last: 3) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }\n`);\n// requestCounter is now 2\n```\n\n## Errors\n\nIn case of a GraphQL error, `error.message` is set to the first error from the response’s `errors` array. All errors can be accessed at `error.errors`. `error.request` has the request options such as query, variables and headers set for easier debugging.\n\n```js\nlet { graphql } = require(\"@octokit/graphql\");\ngraphqlt = graphql.defaults({\n  headers: {\n    authorization: `token secret123`\n  }\n});\nconst query = `{\n  viewer {\n    bioHtml\n  }\n}`;\n\ntry {\n  const result = await graphql(query);\n} catch (error) {\n  // server responds with\n  // {\n  // \t\"data\": null,\n  // \t\"errors\": [{\n  // \t\t\"message\": \"Field 'bioHtml' doesn't exist on type 'User'\",\n  // \t\t\"locations\": [{\n  // \t\t\t\"line\": 3,\n  // \t\t\t\"column\": 5\n  // \t\t}]\n  // \t}]\n  // }\n\n  console.log(\"Request failed:\", error.request); // { query, variables: {}, headers: { authorization: 'token secret123' } }\n  console.log(error.message); // Field 'bioHtml' doesn't exist on type 'User'\n}\n```\n\n## Partial responses\n\nA GraphQL query may respond with partial data accompanied by errors. In this case we will throw an error but the partial data will still be accessible through `error.data`\n\n```js\nlet { graphql } = require(\"@octokit/graphql\");\ngraphql = graphql.defaults({\n  headers: {\n    authorization: `token secret123`\n  }\n});\nconst query = `{\n  repository(name: \"probot\", owner: \"probot\") {\n    name\n    ref(qualifiedName: \"master\") {\n      target {\n        ... on Commit {\n          history(first: 25, after: \"invalid cursor\") {\n            nodes {\n              message\n            }\n          }\n        }\n      }\n    }\n  }\n}`;\n\ntry {\n  const result = await graphql(query);\n} catch (error) {\n  // server responds with\n  // {\n  //   \"data\": {\n  //     \"repository\": {\n  //       \"name\": \"probot\",\n  //       \"ref\": null\n  //     }\n  //   },\n  //   \"errors\": [\n  //     {\n  //       \"type\": \"INVALID_CURSOR_ARGUMENTS\",\n  //       \"path\": [\n  //         \"repository\",\n  //         \"ref\",\n  //         \"target\",\n  //         \"history\"\n  //       ],\n  //       \"locations\": [\n  //         {\n  //           \"line\": 7,\n  //           \"column\": 11\n  //         }\n  //       ],\n  //       \"message\": \"`invalid cursor` does not appear to be a valid cursor.\"\n  //     }\n  //   ]\n  // }\n\n  console.log(\"Request failed:\", error.request); // { query, variables: {}, headers: { authorization: 'token secret123' } }\n  console.log(error.message); // `invalid cursor` does not appear to be a valid cursor.\n  console.log(error.data); // { repository: { name: 'probot', ref: null } }\n}\n```\n\n## Writing tests\n\nYou can pass a replacement for [the built-in fetch implementation](https://github.com/bitinn/node-fetch) as `request.fetch` option. For example, using [fetch-mock](http://www.wheresrhys.co.uk/fetch-mock/) works great to write tests\n\n```js\nconst assert = require(\"assert\");\nconst fetchMock = require(\"fetch-mock/es5/server\");\n\nconst { graphql } = require(\"@octokit/graphql\");\n\ngraphql(\"{ viewer { login } }\", {\n  headers: {\n    authorization: \"token secret123\"\n  },\n  request: {\n    fetch: fetchMock\n      .sandbox()\n      .post(\"https://api.github.com/graphql\", (url, options) => {\n        assert.strictEqual(options.headers.authorization, \"token secret123\");\n        assert.strictEqual(\n          options.body,\n          '{\"query\":\"{ viewer { login } }\"}',\n          \"Sends correct query\"\n        );\n        return { data: {} };\n      })\n  }\n});\n```\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/octokit/graphql.js.git"
  },
  "sideEffects": false,
  "source": "dist-src/index.js",
  "types": "dist-types/index.d.ts",
  "version": "4.3.1"
}
